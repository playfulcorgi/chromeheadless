// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var CacheManager = require("cache-manager");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Screenshot$NewProject = require("./Screenshot.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var CacheManagerFsBinary = require("cache-manager-fs-binary");

((require('isomorphic-fetch')));

function imageQueryToJs(param) {
  return {
          url: param[/* url */0]
        };
}

function imageQueryFromJs(param) {
  return /* record */[/* url */param.url];
}

var diskCache = CacheManager.caching({
      store: CacheManagerFsBinary,
      options: {
        ttl: Caml_format.caml_int_of_string(process.env.CACHE_TTL),
        maxsize: Caml_format.caml_int_of_string(process.env.CACHE_MAX_SIZE),
        path: "/diskcache",
        preventfill: true,
        reviveBuffers: true
      }
    });

function respondScreenshot(url, response) {
  return diskCache.wrap(url, (function (cacheCallback) {
                Screenshot$NewProject.takeScreenshotDefault(url).then((function (imageBuffer) {
                          Curry._2(cacheCallback, null, {
                                binary: {
                                  image: imageBuffer
                                }
                              });
                          return Promise.resolve(/* () */0);
                        })).catch((function (param) {
                        response.statusCode = 500;
                        response.end();
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }), (function (param, result) {
                response.end(result.binary.image, "binary");
                return /* () */0;
              }));
}

function decodeUrlsStructure(list, url) {
  var decodeUrlObj = function (input) {
    return /* record */[/* sourceUrl */Json_decode.field("sourceUrl", Json_decode.string, input)];
  };
  var decodedUrls = Json_decode.array(decodeUrlObj, list);
  return List.find((function (sourceUrl) {
                return url === sourceUrl;
              }), List.map((function (re) {
                    return re[/* sourceUrl */0];
                  }), $$Array.to_list(decodedUrls)));
}

function screenshotOrErrorResponse(url, response) {
  var exit = 0;
  var val;
  try {
    val = respondScreenshot(url, response);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      response.statusCode = 500;
      response.end();
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* () */0;
  }
  
}

function handler(request, response) {
  var queryParams = imageQueryFromJs(request.query);
  var match = queryParams[/* url */0];
  if (match !== undefined) {
    var url = match;
    var match$1 = process.env.WHITELIST_URL;
    if (match$1 !== undefined) {
      fetch(decodeURIComponent(match$1)).then((function (prim) {
                  return prim.json();
                })).then((function (list) {
                var exit = 0;
                var val;
                try {
                  val = decodeUrlsStructure(list, url);
                  exit = 1;
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    response.statusCode = 400;
                    response.end("not on whitelist");
                  } else {
                    throw exn;
                  }
                }
                if (exit === 1) {
                  screenshotOrErrorResponse(url, response);
                }
                return Promise.resolve(/* () */0);
              })).catch((function (param) {
              response.statusCode = 500;
              response.end("Could not use whitelist. make sure the whitelist url is correct and data structure returned is array.");
              return Promise.resolve(/* () */0);
            }));
      return /* () */0;
    } else {
      screenshotOrErrorResponse(url, response);
      return /* () */0;
    }
  } else {
    response.statusCode = 400;
    response.end();
    return /* () */0;
  }
}

exports.imageQueryToJs = imageQueryToJs;
exports.imageQueryFromJs = imageQueryFromJs;
exports.diskCache = diskCache;
exports.respondScreenshot = respondScreenshot;
exports.decodeUrlsStructure = decodeUrlsStructure;
exports.screenshotOrErrorResponse = screenshotOrErrorResponse;
exports.handler = handler;
/*  Not a pure module */
