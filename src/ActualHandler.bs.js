// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var CacheManager = require("cache-manager");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Screenshot$NewProject = require("./Screenshot.bs.js");
var CacheManagerFsBinary = require("cache-manager-fs-binary");

function imageQueryToJs(param) {
  return {
          url: param[/* url */0],
          password: param[/* password */1]
        };
}

function imageQueryFromJs(param) {
  return /* record */[
          /* url */param.url,
          /* password */param.password
        ];
}

var diskCache = CacheManager.caching({
      store: CacheManagerFsBinary,
      options: {
        ttl: Caml_format.caml_int_of_string(process.env.CACHE_TTL),
        maxsize: Caml_format.caml_int_of_string(process.env.CACHE_MAX_SIZE),
        path: "/diskcache",
        preventfill: true,
        reviveBuffers: true
      }
    });

function respondScreenshot(url, response) {
  return diskCache.wrap(url, (function (cacheCallback) {
                Screenshot$NewProject.takeScreenshotDefault(url).then((function (imageBuffer) {
                          Curry._2(cacheCallback, null, {
                                binary: {
                                  image: imageBuffer
                                }
                              });
                          return Promise.resolve(/* () */0);
                        })).catch((function (param) {
                        response.statusCode = 500;
                        response.end();
                        return Promise.resolve(/* () */0);
                      }));
                return /* () */0;
              }), (function (param, result) {
                response.end(result.binary.image, "binary");
                return /* () */0;
              }));
}

function handler(request, response) {
  var queryParams = imageQueryFromJs(request.query);
  var match = queryParams[/* url */0];
  if (match !== undefined) {
    try {
      respondScreenshot(match, response);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Js_exn.$$Error) {
        response.statusCode = 500;
        response.end();
      } else {
        throw exn;
      }
    }
    return undefined;
  } else {
    response.statusCode = 400;
    response.end();
    return undefined;
  }
}

exports.imageQueryToJs = imageQueryToJs;
exports.imageQueryFromJs = imageQueryFromJs;
exports.diskCache = diskCache;
exports.respondScreenshot = respondScreenshot;
exports.handler = handler;
/* diskCache Not a pure module */
